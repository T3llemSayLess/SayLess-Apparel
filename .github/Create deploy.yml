 #!/usr/bin/env bash
 'set -euo pipefail
 IFS=$'\n\t'

# -------------------------
# Configuration
# -------------------------
REPO_NAME="${REPO_NAME:-SayLess-Apparel}"
REPO_DIR="${REPO_DIR:-$HOME/sayless_apparel}"
GITHUB_USER="${GITHUB_USER:-${GITHUB_USER:-}}"
GITHUB_TOKEN="${GITHUB_TOKEN:-${GITHUB_TOKEN:-}}"
LOG_FILE="${LOG_FILE:-$HOME/sayless_deploy.log}"
NODE_VERSION="${NODE_VERSION:-20}"
PYTHON_VERSION="${PYTHON_VERSION:-3.12}"
MAIN_BRANCH="${MAIN_BRANCH:-main}"

# Optional remote deploy details (for automatic authorized_keys install)
DEPLOY_HOST="${DEPLOY_HOST:-}"
DEPLOY_USER="${DEPLOY_USER:-}"
DEPLOY_PORT="${DEPLOY_PORT:-22}"

log() { printf '[%s] %s\n' "$(date '+%Y-%m-%d %H:%M:%S')" "$1" | tee -a "$LOG_FILE"; }

log "Starting GitHub-enabled SayLess deployment..."

# -------------------------
# Ensure base system packages (non-intrusive)
# -------------------------
if command -v apt >/dev/null 2>&1; then
  log "Updating apt packages (quiet)..."
  sudo apt update -y >/dev/null
fi

# -------------------------
# Ensure git present
# -------------------------
if ! command -v git >/dev/null 2>&1; then
  log "Installing git..."
  if command -v apt >/dev/null 2>&1; then
    sudo apt install -y git
  else
    log "Please install git manually for your distro; aborting."
    exit 1
  fi
fi

# -------------------------
# Install GitHub CLI (gh) if missing
# -------------------------
if ! command -v gh >/dev/null 2>&1; then
  log "Installing GitHub CLI (gh)..."
  if command -v apt >/dev/null 2>&1; then
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
      sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg >/dev/null 2>&1
    sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" \
      | sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null
    sudo apt update -y >/dev/null
    sudo apt install -y gh
  else
    log "Non-apt OS - attempting to install gh via curl installer..."
    curl -fsSL https://github.com/cli/cli/releases/latest/download/gh_$(uname -s)_$(uname -m).tar.gz -o /tmp/gh.tar.gz
    tar -xzf /tmp/gh.tar.gz -C /tmp && sudo cp /tmp/gh_*/*/bin/gh /usr/local/bin/gh
  fi
fi

# -------------------------
# GitHub auth (requires GITHUB_TOKEN in env)
# -------------------------
if [ -n "${GITHUB_TOKEN:-}" ]; then
  log "Authenticating gh using GITHUB_TOKEN..."
  printf '%s' "$GITHUB_TOKEN" | gh auth login --with-token >/dev/null
else
  log "GITHUB_TOKEN not set. You will be able to push only if gh already logged-in or you will be prompted later by gh."
fi

# -------------------------
# Create deployment directory and pull or clone repo
# -------------------------
mkdir -p "$REPO_DIR"
cd "$REPO_DIR" || exit 1
log "Deploy dir: $REPO_DIR (cwd: $(pwd))"

if [ ! -d ".git" ]; then
  log "No git repo found. Initializing..."
  git init
  # create a safe default main branch
  git checkout -b "$MAIN_BRANCH" || git branch -M "$MAIN_BRANCH"
fi

# If repo empty, create placeholder files so push succeeds
if [ -z "$(ls -A .)" ]; then
  log "Directory empty — creating starter files..."
  mkdir -p public src
  echo "# SayLess Apparel" > README.md
  cat > .gitignore <<'EOF'
node_modules
.env
.env.enc
.DS_Store
dist
__pycache__
*.pyc
EOF
  git add .
  git commit -m "chore: initial scaffold for SayLess Apparel" || true
fi

# -------------------------
# Create GitHub repo (if GITHUB_USER and token present)
# -------------------------
if [ -n "${GITHUB_USER:-}" ] && gh api user >/dev/null 2>&1; then
  FULL_REPO="${GITHUB_USER}/${REPO_NAME}"
  if ! gh repo view "$FULL_REPO" >/dev/null 2>&1; then
    log "Creating GitHub repo: $FULL_REPO (public)"
    gh repo create "$FULL_REPO" --public --confirm >/dev/null
  else
    log "GitHub repo $FULL_REPO already exists."
  fi

  # set remote and push
  if ! git remote | grep -q origin; then
    git remote add origin "git@github.com:${FULL_REPO}.git"
  fi

  # Ensure there is a commit to push
  if [ -z "$(git rev-parse --verify HEAD 2>/dev/null || true)" ]; then
    git add .
    git commit -m "initial commit" || true
  fi

  log "Pushing code to GitHub..."
  git push -u origin "$MAIN_BRANCH" --force
else
  log "GITHUB_USER or gh auth not available; skipping GitHub repo creation. If you want full automation, set GITHUB_USER and GITHUB_TOKEN."
fi

# -------------------------
# Create GitHub Actions workflow for deployment
# -------------------------
WORKFLOW_DIR=".github/workflows"
mkdir -p "$WORKFLOW_DIR"

cat > "$WORKFLOW_DIR/deploy.yml" <<'YML'
name: CI & Deploy

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies (frontend)
        run: |
          if [ -f package.json ]; then
            npm ci
            npm run build || true
          fi
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install backend deps
        run: |
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          fi

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            set -e
            echo "Deploying SayLess-Apparel on remote host..."
            cd /var/www/sayless_apparel || mkdir -p /var/www/sayless_apparel && cd /var/www/sayless_apparel
            # if git present on remote, pull; otherwise clone
            if [ -d ".git" ]; then
              git fetch --all
              git reset --hard origin/main
            else
              git clone --depth 1 https://github.com/${{ github.repository }} . || git clone git@github.com:${{ github.repository }} .
            fi
            # install backend/frontend as needed
            if [ -f "requirements.txt" ]; then
              python3 -m pip install --upgrade pip
              pip3 install -r requirements.txt
            fi
            if [ -f "package.json" ]; then
              npm install --legacy-peer-deps || true
              npm run build || true
            fi
            # use pm2 to ensure app runs
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm install -g pm2 || true
            fi
            pm2 startOrRestart ecosystem.config.js || true
YML

git add "$WORKFLOW_DIR/deploy.yml"
git commit -m "ci: add GitHub Actions deploy workflow" || true
if [ -n "${GITHUB_USER:-}" ] && gh api user >/dev/null 2>&1; then
  git push origin "$MAIN_BRANCH" || true
fi

# -------------------------
# Generate SSH deploy key for Actions (will be stored as a repo secret)
# -------------------------
DEPLOY_KEY_PRIVATE=".github/deploy_key"
DEPLOY_KEY_PUBLIC="${DEPLOY_KEY_PRIVATE}.pub"

if [ ! -f "$DEPLOY_KEY_PRIVATE" ]; then
  log "Generating deploy SSH key pair..."
  mkdir -p .github
  ssh-keygen -t ed25519 -f "$DEPLOY_KEY_PRIVATE" -N "" -C "github-actions-deploy-key" >/dev/null
else
  log "Deploy key already exists."
fi

# If we have repo on GH and gh is available, set the private key as a repo secret
if [ -n "${GITHUB_USER:-}" ] && gh api user >/dev/null 2>&1; then
  FULL_REPO="${GITHUB_USER}/${REPO_NAME}"
  log "Setting DEPLOY_PRIVATE_KEY secret for $FULL_REPO..."
  gh secret set DEPLOY_PRIVATE_KEY --body "$(cat "$DEPLOY_KEY_PRIVATE")" --repo "$FULL_REPO"
  # set host/user/port secrets if provided from env
  if [ -n "${DEPLOY_HOST:-}" ]; then
    gh secret set DEPLOY_HOST --body "${DEPLOY_HOST}" --repo "$FULL_REPO"
  fi
  if [ -n "${DEPLOY_USER:-}" ]; then
    gh secret set DEPLOY_USER --body "${DEPLOY_USER}" --repo "$FULL_REPO"
  fi
  if [ -n "${DEPLOY_PORT:-}" ]; then
    gh secret set DEPLOY_PORT --body "${DEPLOY_PORT}" --repo "$FULL_REPO"
  fi
else
  log "Skipping setting repo secrets: GitHub login not available."
fi

# -------------------------
# Attempt to copy public key to remote host (if details provided and reachable)
# -------------------------
if [ -n "${DEPLOY_HOST:-}" ] && [ -n "${DEPLOY_USER:-}" ]; then
  if command -v ssh-copy-id >/dev/null 2>&1; then
    log "Attempting to copy public key to ${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_PORT} using ssh-copy-id..."
    if ssh-copy-id -i "$DEPLOY_KEY_PUBLIC" -p "$DEPLOY_PORT" "${DEPLOY_USER}@${DEPLOY_HOST}" >/dev/null 2>&1; then
      log "Public key installed on remote host."
    else
      log "ssh-copy-id failed (host unreachable or credentials missing). You may need to copy $(pwd)/$DEPLOY_KEY_PUBLIC into the remote server's ~/.ssh/authorized_keys manually."
      log "Public key path: $(pwd)/$DEPLOY_KEY_PUBLIC"
    fi
  else
    log "ssh-copy-id not installed. Please add the public key to remote authorized_keys manually:"
    log "Public key path: $(pwd)/$DEPLOY_KEY_PUBLIC"
  fi
else
  log "No DEPLOY_HOST/DEPLOY_USER set — skipping automatic authorized_keys step."
fi

# -------------------------
# Finalize: push any remaining changes
# -------------------------
git add -A
git commit -m "chore: finalize GitHub CI/CD integration" || true
if [ -n "${GITHUB_USER:-}" ] && gh api user >/dev/null 2>&1; then
  git push origin "$MAIN_BRANCH" || true
fi

log "GitHub integration complete. Repo: ${GITHUB_USER:-<not-set>}/${REPO_NAME}"
if [ -f "$DEPLOY_KEY_PUBLIC" ]; then
  log "Generated deploy public key: $(pwd)/$DEPLOY_KEY_PUBLIC"
fi
log "If you want Actions to automatically SSH into a remote server, make sure the public key above is in that remote server's ~/.ssh/authorized_keys or let ssh-copy-id succeed earlier."
log "Done." 
